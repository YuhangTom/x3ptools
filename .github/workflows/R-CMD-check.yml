on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

name: Build

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
#          - {os: windows-latest, r: '3.6'}
          - {os: windows-latest, r: 'release'}
          - {os: ubuntu-16.04,   r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
#          - {os: macOS-latest,   r: 'release'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      RGL_USE_NULL: true
      _RGL_USE_NULL_: true

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}

      - uses: r-lib/actions/setup-pandoc@master

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'cat(remotes::system_requirements("ubuntu", "16.04"), sep = "\n")')

      - name: Install XQuartz on macOS
        if: runner.os == 'macOS'
        run: |
          brew cask install xquartz
          
#      - name: Install XQuartz on macOS
#        if: runner.os == 'macOS'
#        run: |
          #wget --quiet https://dl.bintray.com/xquartz/downloads/XQuartz-2.7.11.dmg
          #hdiutil mount XQuartz-2.7.11.dmg
          #sudo installer -package /Volumes/XQuartz-2.7.11/XQuartz.pkg -target /
          #hdiutil unmount "/Volumes/XQuartz-2.7.11/"
          
#      - name: Update library linking on macOS
#        if: runner.os == 'macOS'
#        run: |
          #brew unlink libtiff
          #brew reinstall libtiff
          #brew unlink libjpeg
          #brew reinstall libjpeg
          #brew unlink libpng
          #brew reinstall libpng

      - name: Install rgl from source
        if: runner.os != 'Windows'
        run: |
          Rscript -e 'options(rgl.useNULL = TRUE)
                      remotes::install_cran(c("rgl", "png"), type = "source")'
        
      - name: Install R package deps on Linux/macOS
        if: runner.os != 'Windows'
        run: | 
          options(rgl.useNULL = TRUE)
          remotes::install_cran("rgl", type = "source")
        shell: Rscript {0}
          
#      - name: Try to fix mac rgl
#        if: runner.os == 'macOS'
#        run: unlink(system.file("libs/aglrgl.so", package="rgl"))
#        shell: Rscript {0}
          
      - name: Install dependencies
        run: |
          "rgl" %in% installed.packages()
          
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}
        
      - name: Does rgl load?
        run: |
          options(width = 100)
          options(rgl.useNULL = TRUE)
          library(rgl)
          library(x3ptools)
        shell: Rscript {0}
        
      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
          RGL_USE_NULL: true
          _RGL_USE_NULL_: true
        run: |
          options(rgl.useNULL = TRUE)
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "error", check_dir = "check")
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
